import spotipy
import pandas as pd
import unidecode


def df_from_search(sp, search_query, query_type="track"):
    '''
    This function takes three arguments:
     - a spotipy.client.Spotify object (this establishes the connection to the API)
     - a query (a string with one or more words separated by %20 or +; example: my+heart+will+go+on)
     - an optional argument specifying query type ("track", "album", "artist") 
     
    and submits the query to the Spotify API (through the spotipy wrapper). 
    
    It returns a dataframe with track_name, artist_name and uri (unique resource identifier) for all search results 
    (can be more than one).
    '''
    search_results = sp.search(search_query, limit=20, type=query_type)
    
    track_name = []
    artist_name = []
    uri = []
    
    for i in search_results["tracks"]["items"]:
        track_name.append(i["name"])
        artist_name.append(i["artists"][0]["name"])
        uri.append(i["uri"][14:])
    
    df = pd.DataFrame()
    df["track_name"] = track_name
    df["artist_name"] = artist_name
    df["uri"] = uri
    
    return(df)


def find_right_track(df, artist):
    '''
    This function takes as arguments a dataframe generated by df_from_search and a string containing an artist name 
    separated by single spaces.
    
    It returns the uri for the first row where the artist_name matches the artist argument passed to the function.
    
    It is case-insensitive. Ampersands are replaced with "and" and unicode characters are converted to ASCII using the 
    unidecode library.
    '''
    artist = unidecode.unidecode_expect_ascii(artist).lower()
    
    mapper = []
    
    for i in df.index:
        if unidecode.unidecode_expect_ascii(df.loc[i]["artist_name"]).lower().replace("&", "and") == artist:
            mapper.append(i)
    
    try:
        return(df.loc[mapper].reset_index(drop = True).loc[0, "uri"])
    except:
        return(pd.NA)
